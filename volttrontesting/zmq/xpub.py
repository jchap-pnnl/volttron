import os

import zmq.green as zmq
import zmq.auth
from zmq.auth.thread import ThreadAuthenticator


def main():

    # These directories are generated by the generate_certificates script
    base_dir = os.path.dirname(__file__)
    keys_dir = os.path.join(base_dir, 'certificates')
    public_keys_dir = os.path.join(base_dir, 'public_keys')
    secret_keys_dir = os.path.join(base_dir, 'private_keys')
    ctx = zmq.Context.instance()

    # Start an authenticator for this context.
    auth = ThreadAuthenticator(ctx)
    auth.start()
    auth.allow('127.0.0.1')
    # Tell the authenticator how to handle CURVE requests
    auth.configure_curve(domain='*', location=zmq.auth.CURVE_ALLOW_ANY)

    try:
        # Socket facing services
        server_secret_file = os.path.join(secret_keys_dir,
                                          "server.key_secret")
        server_public, server_secret = zmq.auth.load_certificate(
            server_secret_file)
        print('result1')
        backend = ctx.socket(zmq.PUB)
        backend.curve_secretkey = server_secret
        backend.curve_publickey = server_public
        backend.curve_server = True  # must come before bind
        backend.bind("tcp://*:5000")
        print('result2')
#       context = zmq.Context(1)
        # Socket facing clients
        frontend = ctx.socket(zmq.SUB)
        print('result3')
        # We need two certificates, one for the client and one for
        # the server. The client must know the server's public key
        # to make a CURVE connection.
        client_secret_file = os.path.join(secret_keys_dir,
                                          "client.key_secret")
        client_public, client_secret = zmq.auth.load_certificate(
            client_secret_file)
        frontend.curve_secretkey = client_secret
        frontend.curve_publickey = client_public
        frontend.curve_serverkey = server_public
        print('result4')
        frontend.bind("tcp://*:5001")

        frontend.setsockopt(zmq.SUBSCRIBE, "")
        print('result5')
        zmq.device(zmq.FORWARDER, frontend, backend)
        print('result6')
    except Exception, e:
        print e
        print "bringing down zmq device"
    finally:
        pass
        frontend.close()
        backend.close()
        ctx.term()

if __name__ == "__main__":
    main()


